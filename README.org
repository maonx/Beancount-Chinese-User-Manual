#+TITLE: Beancount 中文用户手册
#+DATE: [2020-04-14 周二]
#+AUTHOR: Martin Blais

#+BEGIN_QUOTE
本项目基于 [[http://furius.ca/beancount/doc/index][Beancount User's Manual]] ，因苦于 Beancount 的中文文档资料一直不是特别全面，所以目前开始利于 [[https://www.deepl.com/home][DeepL]] 翻译工具进行机翻，并稍加修饰已达到自用的目的。
#+END_QUOTE

* 用户文档
这里是与Beancount相关的所有文档的目录页。

- 文本中使用命令行记账：一篇启发性文档，解释了什么是命令行记账、我为什么要这么做和用一个简单的例子来说明我是怎么做的，可作为一篇简介来读。
- 复式记账法：优雅地介绍复式记账法，与命令行记账系统所做的假设和简化相一致。
- 安装 Beancount: 使用计算机下载和安装的说明，以及软件发布信息。
- 运行 Beancount 并生成报表：如何运行 Beancount 可执行文件并使用它生成报告。这包含了针对 Beancount 用户的技术信息。
- Beancount 入门教程：解释了如何创建、初始化和组织输入文件的基本知识，以及声明账户和添加填充指令的过程。
- Beancount 语言语法:对语言语法的完整描述和示例。这是 Beancount 语言的主要参考。
- Beancount 选项参考: 对所有可能的选项值的描述和说明。
- 精度和公差。交易和余额断言可以容忍少量的不精确性，这些不精确性是由上下文推断出来的，本文档解释了这是如何工作的。
- Beancount 查询语言。Bean-query命令行客户端工具的高级概述，允许您从Beancount分类账文件中提取各种数据表格。
- Beancount 备忘录。总结了 Beancount 语法的单页备忘录。
- 存货是如何工作的。解释存货、存货的表示方式，以及如何将份额与存货中的仓位进行匹配的细节。这是对交易文档的初步阅读。
- 导出你的投资组合：如何将你的投资组合导出到外部投资组合跟踪网站。
- 教程与实例。一个现实的分类账文件，包含了一个假想的 Beancount 用户几年理财生活的实例。这可以用来验证 Beancount 的用法，查看报表或其网页界面的样子。这可以让您快速了解 Beancount 的使用情况。
- Beancount 邮件列表。Beancount 的问题和讨论都会在这里进行。与此相关的还包括 Ledger-CLI 论坛，该论坛包含了大量的一般性讨论，并作为命令行会计主题的元列表。
- Beancount 的历史和荣誉。描述了 Beancount 的发展历史，并对其贡献者表示感谢。
- Beancount 和 Ledger & HLedger 的比较。CLI 会计系统之间的定性功能比较。
- 在 Beancount 中获取价格。如何使用 Beancount 的工具获取和维护资产价格数据库。
- 导入外部数据：介绍如何使用从金融机构下载的文件导入数据的过程，以及 Beancount 提供的工具和库来实现部分自动化。

* 食谱和实例
这些单据是使用复式记账法进行具体工作的例子。使用这些单据可以让你对如何构造账目有一个直观的认识。
- 命令行会计食谱：关于如何记账的多种不同类型的财务交易的各种实例。这无疑是对如何最好地使用复式记账法最好的直观方法。
- [[./中文文档/使用Beancount进行交易.org][使用 Beanount 进行交易]]：解释交易盈亏关系，并举例说明如何使用 Beancount 处理各种投资交易场景。这是对该食谱的补充。
- Beancount 中的股票归属：介绍如何在Beancount中进行股票归属。介绍了如何处理科技公司和初创公司提供的限制性股票单位和归属事件的典型案例。
- 用 Beancount 分摊费用：一个现实而详细的例子来说明如何使用复式记账法与他人分摊旅行或项目的费用。
- 我们如何分摊费用。描述了一个更复杂的连续系统：(a) 当两个人都出钱时，合伙人之间分担费用，(b) 将费用分给特定的项目(我们的儿子)，他有自己的账本。这描述了我们真正的系统。

* 开发人员文档
- Beancount 脚本和插件。编写脚本将分类账内容加载到内存中并处理指令的指南，以及如何编写转换这些指令的插件。
- Beancount 设计文档：关于程序的架构和设计选择、代码约定、不变性和方法论的信息。如果你想更深入的了解，请阅读这篇文档。
- LedgerHub 设计文档：在 beancount.ingest 中实现的导入工具和库的设计和架构。这曾经是一个独立的项目，名为 LedgerHub（现在已经解散），其有用的部分最终被合并到 Beancount 中。这是个有点过时的原始设计文档。
- 源代码。Beancount 源代码的官方仓库在 BitBucket。
- 外部贡献。基于 Beancount 库的插件、导入程序和其他代码的列表，其他人已经创建和共享了这些代码。

* 优化建议及讨论
TODO

* 外部链接
- 其他作者写的关于Beancount的文档、链接、博客条目、文章等。
- Beancount 源代码文档(Dominik Aumayr): sphinx 生成的 Beancount 代码库的源代码文档。产生这个的代码在这里。
- Beancount 或者说是黑客的账目(Cyril Deguet):一个概述博客条目(法语)。

* 关于本文档
你可能已经注意到，我在使用谷歌文档。我知道这对于一个开源项目来说是不寻常的。如果你对此不以为然，那么你知道，我确实也喜欢文本格式：在研究生时代，我广泛使用 LaTeX，在过去的十年里，我爱上了 reStructuredText 格式，我甚至为 Emacs 写了对它的支持。但在2013年前后发生了一些事情：谷歌文档变得足够好，我开始广泛地喜欢上了它的修改和注释功能，可以写出可靠的技术文档。我着迷了，我爱上了它。对于用户来说，能够提出修改建议或在上下文中放置评论是一个非常有用的功能，它比补丁或邮件列表中的评论更有助于提高我的写作质量。它还让用户有机会指出需要改进的地方。我在文档上收到的反馈比我的其他项目都要多出好几个数量级，它很好用。

它看起来也很不错，这有助于激励我写出更多更好的东西。我想也许我又爱上了 WYSIWYG 了。别误会我的意思，LaTeX 和无标记格式都很好，但世界在变化，对我来说，社区协作和一个有生命力的文档比在我的存储库中慢慢老化的TeX文件更重要。我的目标是制作出易于阅读的高质量的文本，打印出来的效果很好，尤其是现在，在移动设备或平板电脑上可以很好地显示，所以你可以在任何地方阅读。我还可以在出差的时候编辑它，这对我来说很有趣，可以记下一些想法或进行修改。最后，谷歌文档有一个 API 提供了对文档的访问权限，所以如果需要的话，我最终可以下载元数据并将其全部转换为另一种格式。我并不喜欢它的一切，但它所提供的东西，我真的很喜欢。

如果你想发表评论，我希望你能在阅读时登录你的谷歌账户，这样你的名字就会出现在你的评论旁边。谢谢你！
